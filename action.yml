name: Create Issue
description: GitHub action to create Jira issues and send Slack notifications for pull requests.
inputs:
  project:
    description: The Jira project to add the issue to.
    required: true
  summary:
    description: The summary of the isssue.
    required: false
  description:
    description: A description of the isssue.
    required: false
  transition:
    description: Transtion to apply to the issue.
    default: To Do
  test-case:
    description: Instructions on how to test the issue.
    default: Standard smoke test.
  deployment-instructions:
    description: Instructions on how to deploy the issue.
    default: Unknown
  pull-url:
    description: The URL of the pull request to create the issue about.
    default: ${{ github.event.pull_request.html_url }}
  jira-url:
    description: Base URL the Jira instance.
    required: true
  jira-user:
    description: Email of the Jira API user.
    required: true
  jira-token:
    description: API token of the Jira API user.
    required: true
  github-token:
    description: GitHub access token
    default: ${{ github.token }}
  slack-webhook:
    description: Optional Slack webhook URL to receive notifications.
    required: false

runs:
  using: composite
  steps:
    - name: Missing Pull Request
      if: ${{ inputs.pull-url == '' }}
      run: |
        echo "::error:: Missing pull-url: pull-url is required when not running from a pull request "
        exit 1
      shell: bash

    - name: Get Pull Request Information
      id: pr-info
      run: |
          fields="title,number,url"
          pull_info=$(gh pr view $PULL --json $fields)
          echo "::debug::pull_info=$pull_info"

          for field in ${fields//,/ }; do
            value=$(jq -r --arg field "$field" '.[$field]' <<< $pull_info)
            echo "$field=$value" >> $GITHUB_OUTPUT
          done
      env:
        PULL: ${{ inputs.pull-url }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
      shell: bash

    - name: Check if automerging
      id: automerge
      run: |
          echo Sleeping for 10 seconds before checking if automerge is enabled.
          sleep 10

          echo Checking if automerge is enabled.
          automerge=$(gh pr view $PULL --json autoMergeRequest)
          echo "::debug::automerge=$pull_info"

          if jq -e '.autoMergeRequest == null' <<< "$automerge" > /dev/null; then
            echo Automerge is not enabled
            echo "mergable=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo Getting list of required status checks
          rule_sets=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/rules/branches/${{ github.base_ref }})
          required_checks=$(jq -c <<<"$rule_sets" '[.[]| select(.type == "required_status_checks").parameters.required_status_checks[] | .context]')
          echo "::debug::required status checks : $required_checks"

          filter_results() {
            jq <<< "$1" \
              --argjson required "$required_checks" \
              '[.statusCheckRollup[] | select([.name] | inside($required))]'
          }
          echo Waiting for status checks to complete
          empty_result_count=0
          status_checks=$(gh pr view $PULL --json statusCheckRollup)
          while ! filter_results "$status_checks" | jq -e '.[] | .status == "COMPLETED"' > /dev/null
          do
            sleep 1
            echo Checking status check again
            status_checks=$(gh pr view $PULL --json statusCheckRollup)
            echo "::debug::checks: $(jq <<<"$status_checks" -c)"
            if filter_results "$status_checks" | jq -e 'length == 0' > /dev/null; then
              if (( empty_result_count < 60 )); then
                empty_result_count=$((empty_result_count+1))
                echo "::debug::No required checks running yet"
              else
                echo Exiting because no required checks have started to run after a minute.
                echo "mergable=false" >> "$GITHUB_OUTPUT"
                exit 0
              fi
            fi
          done

          echo Checking if pr is mergable
          merge_state_status=$(gh pr view $PULL --json mergeStateStatus)
          if jq -e '[.mergeStateStatus] | inside(["CLEAN", "UNSTABLE"])' <<< "$merge_state_status" > /dev/null; then
            echo PR will be automerged
            echo "mergable=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo PR is unmergeable, a ticket will be created
          echo "mergable=false" >> "$GITHUB_OUTPUT"
      env:
        PULL: ${{ inputs.pull-url }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
      shell: bash

    - name: Login to jira
      if: ${{ steps.automerge.outputs.mergable  == 'false' }}
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ inputs.jira-url }}
        JIRA_USER_EMAIL: ${{ inputs.jira-user }}
        JIRA_API_TOKEN: ${{ inputs.jira-token }}

    - name: Set Jira Info
      if: ${{ steps.automerge.outputs.mergable  == 'false' }}
      id: jira-info
      env:
        summary: '${{ inputs.summary }}'
        description: '${{ inputs.description }}'
        pr_title: '${{ steps.pr-info.outputs.title }}'
        pull_url: '${{ inputs.pull-url }}'
      run: |
        echo "summary=${summary:-pr_title}" >> $GITHUB_OUTPUT
        echo "description<<EOF" >> $GITHUB_OUTPUT
        echo "${description:-pr_title}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "test_field=${test_field:-customfield_10027}" >> $GITHUB_OUTPUT
        echo "instructions_field=${instructions_field:-customfield_10028}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Create issue
      if: ${{ steps.automerge.outputs.mergable  == 'false' }}
      id: ticket
      uses: atlassian/gajira-create@master
      with:
        project: ${{ inputs.project }}
        issuetype: Task
        summary: ${{ steps.jira-info.outputs.summary }}
        description: |
          ${{ steps.jira-info.outputs.description }}
          ${{ inputs.pull-url }}
        fields: |
          {
            "${{ steps.jira-info.outputs.test_field }}": "${{ inputs.test-case }}",
            "${{ steps.jira-info.outputs.instructions_field }}": "${{ inputs.deployment-instructions }}"
          }

    - name: Put ticket in todo
      if: ${{ steps.automerge.outputs.mergable  == 'false' }}
      uses: atlassian/gajira-transition@master
      with:
        issue: ${{ steps.ticket.outputs.issue }}
        transition: ${{ inputs.transition }}

    # - name: Prepend Ticket ID to Pull Request
    #   if: ${{ steps.automerge.outputs.mergable  == 'false' }}
    #   run: 'gh pr edit $PULL --title "$TICKET: $OLD_TITLE"'
    #   env:
    #     PULL: ${{ inputs.pull-url }}
    #     TICKET: ${{ steps.ticket.outputs.issue }}
    #     OLD_TITLE: ${{ steps.pr-info.outputs.title }}
    #     GITHUB_TOKEN: ${{ inputs.github-token }}
    #   shell: bash

    - name: Comment On Pull Request
      if: ${{ steps.automerge.outputs.mergable  == 'false' }}
      run: gh pr comment $PULL --body "$BODY"
      env:
        PULL: ${{ inputs.pull-url }}
        BODY: >
          Created a jira ticket: [${{ steps.ticket.outputs.issue }}](${{ inputs.jira-url }}/browse/${{ steps.ticket.outputs.issue }})
        GITHUB_TOKEN: ${{ inputs.github-token }}
      shell: bash

    - name: Send custom JSON data to Slack workflow
      if: ${{ steps.automerge.outputs.mergable  == 'false' && inputs.slack-webhook != '' }}
      id: slack
      uses: slackapi/slack-github-action@v1.27.0
      with:
        payload: |
          {
            "ticket_id": "${{ steps.ticket.outputs.issue }}",
            "ticket_url": "${{ inputs.jira-url }}/browse/${{ steps.ticket.outputs.issue }}",
            "pull_url": "${{ inputs.pull-url }}",
            "client_id": "${{ inputs.project }}"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slack-webhook }}
